generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(user)
  createdAt     DateTime  @default(now())
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id                   Int             @id @default(autoincrement())
  name                 String
  origin_name          String
  slug                 String          @unique
  poster_url           String
  thumb_url            String
  content              String?
  type                 String?
  status               String?
  trailer_url          String?
  time                 String?
  episode_current      String?
  episode_total        String?
  chieurap             Boolean?        @default(false)
  sub_docquyen         Boolean?        @default(false)
  is_copyright         Boolean?        @default(false)
  is_sensitive_content Boolean?        @default(false)
  is_recommended       Boolean?        @default(false)
  quality              String?
  lang                 String?
  notify               String?
  showtimes            String?
  year                 Int?
  view                 Int?            @default(0)
  actors               String[]
  directors            String[]
  categories           MovieCategory[]
  countries            MovieCountry[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model MovieCategory {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String  @unique
  movies Movie[]
}

model MovieCountry {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String  @unique
  movies Movie[]
}

enum Role {
  administrator
  modarator
  user
}
